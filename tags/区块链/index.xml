<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>区块链 on TechNotes</title>
    <link>https://technotes.guru/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/</link>
    <description>Recent content in 区块链 on TechNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://technotes.guru/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于区块链的公益捐赠平台</title>
      <link>https://technotes.guru/posts/2008/blockchain-based-philanthropic-platform/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://technotes.guru/posts/2008/blockchain-based-philanthropic-platform/</guid>
      <description>企业/个人与公益组织信息不对称，企业找不到捐赠对象，公益组织找不到想要捐赠企业
当某个企业与公益组织达成捐赠合作后，也往往面临的很多的问题：
 捐赠中涉及的款项不透明，监管难度较大 公益组织本身不是盈利机构，需要将捐赠款项中的一部分作为公益组织的公益费用 按照捐赠协议，比如本次捐赠需要涉及多次活动，管理难度加大，费用使用情况复杂  以企业捐赠为例，企业为了履行其社会责任，决定发起一个捐赠，捐赠金额50万，捐赠3个项目。其中总金额的10%，5万元作为对应公益组织的费用。
场景：
 企业发布公益计划，包括捐赠金额，活动要求等信息，公益活动方向，如针对贫困地区儿童的放心早餐项目 公益组织提交其组织资料，资质等信息，以及相应的活动策划信息 企业与公益组织签订协议  协议内容： &amp;ndash; 活动的捐赠额 &amp;ndash; 捐赠的钱是一次到账，还是按照活动数分批次，每举办一次活动转一次账 活动的活动周期多久，如一年的放心早餐 &amp;ndash; 多少费用作为公益组织的费用 &amp;ndash; 活动的命名 &amp;ndash; 其他一些活动信息   公益组织按照协议条款履行协议内容 企业按照协议条框履行协议内容 按照协议履行的情况增加或者减少Token 过程中涉及的文件，照片等上链存证  方向上可以分为：
 2G方向: 企业/个人社会责任指数、公益组织社会责任指数 2C方向：Token积分兑换物品，社区商城  </description>
    </item>
    
    <item>
      <title>以太坊智能合约开发入门</title>
      <link>https://technotes.guru/posts/2018/blockchain-eth-chaincode/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://technotes.guru/posts/2018/blockchain-eth-chaincode/</guid>
      <description>搭建智能合约开发环境 智能合约的开发环境依赖于node/npm，所以在构建开发环境之前需要确保开发机器已经安装好了node/npm的环境了。
如何还没有安装，那么在mac下面可以通过brew命令非常快速的安装 brew install node 或者自己下载node的安装包安装。 然后分别安装下面的几个开发智能合约需要用到的工具:
 Web3 JS - 开发以太坊客户端的javascript框架 npm install web3 truffle - 以太坊开发框架 npm install -g truffle Metamask - 以太坊钱包，基于Chrome的插件 Ganache - 用于本地的虚拟以太坊区块链， 并且自动创建了用于测试的10个本地的区块链账号  Remix - https://remix.ethereum.org/  以太坊官方推荐的智能合约开发IDE,可以在浏览器中快速部署测试智能合约。   配置Metamask连接Ganache本地环境，Ganache默认的监听端口为7545，所以需要设置Metamask，如下，点击 “Custom RPC”，然后设置本地虚拟区块链的地址
配置完之后，就可以导入Ganache默认创建的账号，
点击右侧的钥匙(show key), 从弹出的界面中拷贝账号的token，然后通过点击Metamask右上角的头像，通过&amp;quot;Import Account&amp;quot;，粘贴刚才复制的token，导入，就可以看到新导入的账号，并且该账号已经默认的有了100个ETH了。
创建智能合约 在Remix编辑器中编写一个简单的智能合约 - HelloWorld
pragma solidity ^0.4.0; contract HelloWorld { string public name; function HelloWorld() public { name = &amp;quot;Liping&amp;quot;; } function setName(string _name) public { name = _name; } } 合约编好之后，点击 &amp;ldquo;Run&amp;rdquo; 标签，在“Environment”中选择&amp;quot;Web3 Provider&amp;quot;</description>
    </item>
    
  </channel>
</rss>
