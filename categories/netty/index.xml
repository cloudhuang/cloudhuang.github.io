<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Netty on TechNotes</title>
    <link>https://technotes.guru/categories/netty/</link>
    <description>Recent content in Netty on TechNotes</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 17 Mar 2021 13:37:54 +0800</lastBuildDate><atom:link href="https://technotes.guru/categories/netty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为什么sleep会让Netty的性能大降</title>
      <link>https://technotes.guru/posts/2021/%E4%B8%BA%E4%BB%80%E4%B9%88sleep%E4%BC%9A%E8%AE%A9netty%E7%9A%84%E6%80%A7%E8%83%BD%E5%A4%A7%E9%99%8D/</link>
      <pubDate>Wed, 17 Mar 2021 13:37:54 +0800</pubDate>
      
      <guid>https://technotes.guru/posts/2021/%E4%B8%BA%E4%BB%80%E4%B9%88sleep%E4%BC%9A%E8%AE%A9netty%E7%9A%84%E6%80%A7%E8%83%BD%E5%A4%A7%E9%99%8D/</guid>
      <description>TL;DR 即时通讯技术分享 在知乎上分享了一些列的高性能网络编程的文章，该系列文章从底层原理说起，提到了高性能网络的方方面面，特别的干货。但是在第七篇文章中， 高性能网络编程(七)：到底什么是高并发？一文即懂！ ，作者通过ab分别对Java(Netty)和PHP(Swoole)进行性能压测的部分让我产生了一些疑惑。
作者使用了ab命令分别进行了压测
ab命令：docker run --rm jordi/ab -k -c 1000 -n 1000000 http://10.234.3.32:5555/
在并发1000进行100万次Http请求的基准测试中的结果如下。
Netty的压测结果:
Swoole的压测结果:
附图直接使用了上述文章中的图片，从数据来看Netty的Requests per second为84042.11，Swoole的Requests per second的结果为87222.98，可见在默认情况下，两者的表现基本是一致的。(不过docker容器、1G内存+2核CPU，能跑出这样的QPS，还是挺意外的)
但是后来作者通过在Java和PHP代码中,分别加上 sleep(0.01) //秒 的代码，模拟0.01秒的系统调用阻塞，下面就产生了奇迹时刻：
Netty的压测结果:
Swoole的压测结果:
可以看到，Netty的QPS一下子降低到了1562.69，较原来的8万多，一下子降低了好几十倍。比起Swoole，也差了好几倍，作者也提到 “**从结果中可以看出：**基于协程的php+ swoole服务比 Java + netty服务的QPS高了6倍。” 。而且这还是0.01秒的结果，到了真实的业务系统上，实际的业务操作时间往往都超过0.01秒。
那么，是什么原因，让Netty的性能大降呢？
Netty 线程模型 首先需要了解下Netty的线程模型，那上文中的示例来说，其实际上是官方的Http中的HelloWorld示例 - HttpHelloWorldServer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public final class HttpHelloWorldServer { static final boolean SSL = System.</description>
    </item>
    
  </channel>
</rss>
